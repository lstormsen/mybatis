<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	定义所有要用到的Sql语句和映射关系
	namespace: 当前这个Mapper文件的唯一标识,可以自定义,但是不能与其他Mapper文件重合
 -->
<!-- <mapper namespace="userMapper"> -->
<!-- 修改为namespace名称和接口名称一致 -->
<mapper namespace="cn.itcast.mybatis.mapper.UserMapper">
	<!-- 
		定义一条Sql,其实就是一个statement
		select: 代表查询语句,榆次类似的还有insert,updata,delete
		id: 这条Sql的唯一标识,可以自定义,但是不能与其他Sql重复
		parameterType: Sql的实际参数属性,要写java类型的全限定名
		resultType: Sql返回的结果对应的Java数据类型,写全限定名
	 -->
	 
	 <!-- 根据用户id查询用户 -->
	 <!-- <select id="queryUserById" parameterType="java.lang.Long" resultType="cn.itcast.mybatis.pojo.User"> -->
	 <!-- 使用简化的方式 -->
	 <select id="queryUserById" parameterType="Long" resultType="User">
	 	<!-- 这里定义真正的SQL语句,#{}代表占位符,当SQL被编译时,会编程?,然后接收真正的参数 -->
	 	<!-- SELECT *, user_name AS userName FROM tb_user WHERE id = #{id} -->
	 	SELECT * FROM tb_user WHERE id = #{id}
	 </select>
	 
	 <!-- 
	 	查询所有的用户 
	 	resultType: 返回结果虽然是一个List,这里仍然写list中的数据类型,Mybatis会指定判断返回值个数并做封装
	 -->
	 <select id="queryAll"  resultType="cn.itcast.mybatis.pojo.User">
	 	SELECT * FROM tb_user 
	 </select>
	 
	 
	 <!-- 开启主键回填功能
	 	      如果参数是复杂对象,name可以通过#{属性名}来获取参数中的属性值
	 	  useGeneratedKeys: 自增主键的回填功能
	 	  keyProperty: 主键对应java对象字段名
	 	  keyColumn: 主键在数据库中的列名
	  -->
	 <!-- 添加用户信息 -->
	 <insert id="insertUser" parameterType="cn.itcast.mybatis.pojo.User"
	 	useGeneratedKeys="true" keyProperty="id" keyColumn="id">
	 	 <!-- 这里用#{字段名},mybatis会自动根据字段名,去User参数中找字段值,设置到Sql中 -->
		 INSERT INTO tb_user (
			id,
			user_name,
			PASSWORD,
			NAME,
			age,
			sex,
			birthday,
			note,
			created,
			updated
		 )
	  	 VALUES
			(
			null,
			#{userName},
			#{password},
			#{name},
			#{age},
			#{sex},
			#{birthday},
			#{note},
			NOW(),
			NOW()
		 );
	
	 </insert>
	 
	 <!-- 修改用户 -->
	 <update id="updataUser" parameterType="cn.itcast.mybatis.pojo.User">
		UPDATE tb_user
		SET 
			user_name = #{userName},
			password = #{password},
			name = #{name},
			age = #{age},
			sex = #{sex},
			birthday = #{birthday},
			note = #{note},
			updated = NOW()
		WHERE
			id = #{id}
			
	 </update>
	 
	 <!-- 根据id删除用户 -->
	 <delete id="deleteUser" parameterType="java.lang.Long">
	 	DELETE FROM tb_user WHERE id = #{id}
	 </delete>
	 
	 
	 <!-- 结果集映射配置
	      id: 这个resultMap的唯一标识,不可重复
	 	  type: 这个映射所标识的java对象类型,可以用别名
	 	  autoMapping: true,开启自动映射,实现驼峰命名的自动映射配置
	  -->
	  <resultMap id="UserResultMap" type="user" autoMapping="true" >
	  	<!-- 配置主键信息
	  		 property: 主键在java对象中的属性名
	  		 column: 主键在数据库中的列名
	  	 -->
	  	 <id property="id" column="id"/>
	  	 <!-- 在这里配置字段名与列名的关系,解决字段名和列名不一致的问题 -->
	  	 <!-- <result property="userName" column="user_name"/> -->
	  </resultMap>
	  
	  <!-- 定义SQL片断
	  	   id: SQL片断的唯一标识
	   -->
	   <sql id="userColumns">
	   		id,user_name,password,name,age,sex,birthday,note,created,updated
	   </sql>
	  
	  
	 <!-- 根据用户名和密码查询用户 -->
	 <!-- <select id="queryUserByUsernameAndPassword" resultType="User"> -->
	 <select id="queryUserByUsernameAndPassword" resultMap="UserResultMap">
	 	<!-- 方式1: 使用0,1,2 排序取法 -->
	 	<!-- SELECT * FROM tb_user WHERE user_name = #{0}  AND password = #{1} -->
	 	
	 	<!-- 方式2: 使用param + i方式取值 -->
	 	<!-- SELECT * FROM tb_user WHERE user_name = #{param1} AND password = #{param2} -->
	 	
	 	<!-- 方式3: 使用param注解形式 -->
	 	<!-- SELECT * FROM tb_user WHERE user_name = #{userName} AND password = #{password} -->
	 	
	 	<!-- 用${}方式获取参数 -->
	 	<!-- SELECT * FROM tb_user WHERE user_name = '${userName}' AND password = '${password}' -->
	 	
	 	<!-- 使用SQL片断获取参数 -->
	 	SELECT <include refid="userColumns"/>
	 	FROM tb_user
	 	WHERE user_name = '${userName}' AND password = '${password}'
	 </select>
	 
	 <!-- 查询男性用户,如果姓名不为空,则进行模糊查询 -->
	 <select id="queryMaleUserByName" resultType="User">
	 	SELECT * FROM tb_user WHERE sex = 1
	 	<if test="name != null and name.trim() != ''">
	 		AND name like #{name}
	 	</if>
	 </select>
	 
	 <!-- 查询所有的用户,根据orderType来排序,0,按照年龄升序;1,按照年龄降序;默认是根据ID升序 -->
	 <select id="queryAllUserAndSort" resultType="User">
	 	SELECT * FROM tb_user
	 	<choose>
	 		<when test="orderType == 0">
	 			ORDER BY age ASC
	 		</when>
	 		
	 		<when test="orderType == 1">
	 			ORDER BY age DESC
	 		</when>
	 		
	 		<otherwise>
	 			ORDER BY ID ASC
	 		</otherwise>
	 	</choose>
	 </select>
	 
	 <!-- 根据姓名和年龄查询用户
		      如果有姓名不为空，则按照姓名模糊查找；如果年龄也不为空，则还要满足年龄小于指定年龄	 		
	  -->
	  <select id="queryUserByUsernameAndAge" resultType="User">
	  		SELECT * FROM tb_user
	  		<where><!-- where的作用就是检测Sql语句,排除多余的AND,避免Sql语法错误 -->
	  			<if test="name != null and name.trim() != ''">
	  				AND name LIKE '%${name}%'
	  			</if>
	  			<if test="age != null">
	  				AND age &lt; #{age}
	  			</if>
	  		</where>
	  </select>
	  
	  <!-- 修改用户,对不修改字段进行空值判断 -->
	  <update id="update" parameterType="User">
	  	UPDATE tb_user
	  	<set><!-- set标签会自动校验标签错误,对多余的","进行删除 -->
	  		<if test="userName != null and userName.trim() != ''">
	  			userName = #{userName},
	  		</if>
	  		<if test="password != null and password.trim() != ''">
	  			password = #{password},
	  		</if>
	  		<if test="name != null and name.trim() != ''">
	  			name = #{name},
	  		</if>
	  		<if test="age != null">
	  			age = #{age},
	  		</if>
	  		<if test="sex != null">
	  			sex = #{sex},
	  		</if>
	  		<if test="birthday != null">
	  			birthday = #{birthday}
	  		</if>
	  	</set>
	  	
	  	WHERE 
	  		id = #{id}
	  </update>
	 
</mapper>